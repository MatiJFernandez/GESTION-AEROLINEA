"""
Django settings for aerolinea project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import sentry_sdk
from dotenv import load_dotenv
import os

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--4_1n-@k8^)h9-)du*cn79r!-6fn5#xay!0bx0^u7m)176l&-7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Aplicaciones incorporadas de Django (built-in apps)
    'django.contrib.admin',        # Panel de administración
    'django.contrib.auth',         # Sistema de autenticación
    'django.contrib.contenttypes', # Framework de tipos de contenido
    'django.contrib.sessions',     # Framework de sesiones
    'django.contrib.messages',     # Framework de mensajes
    'django.contrib.staticfiles',  # Manejo de archivos estáticos
    
    # Aplicaciones del proyecto (creadas por nosotros)
    'usuarios',    # Gestión de usuarios y perfiles
    'vuelos',      # Gestión de vuelos y rutas
    'pasajeros',   # Gestión de pasajeros
    'reservas',    # Sistema de reservas
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',  # Middleware para internacionalización
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Middleware personalizado (comentado temporalmente para debug)
    # 'aerolinea.middleware.RequestLoggingMiddleware',
    # 'aerolinea.middleware.ErrorHandlingMiddleware',
    # 'aerolinea.middleware.SecurityMiddleware',
]

ROOT_URLCONF = 'aerolinea.urls'

TEMPLATES = [
    {
        # Motor de templates de Django (HTML) para admin
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',  # Context processor para i18n
            ],
        },
    },
]

WSGI_APPLICATION = 'aerolinea.wsgi.application'


# Database (Base de datos)
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        # Motor de base de datos (SQLite para desarrollo)
        # Otros motores: postgresql, mysql, oracle
        'ENGINE': 'django.db.backends.sqlite3',
        
        # Nombre del archivo de base de datos
        # BASE_DIR / 'db.sqlite3' = archivo 'db.sqlite3' en la raíz del proyecto
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization (Internacionalización)
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# Idioma principal de la aplicación (es = español por defecto)
LANGUAGE_CODE = 'es'

# Zona horaria del servidor (Argentina)
# Lista completa: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
TIME_ZONE = 'America/Argentina/Buenos_Aires'

# Habilita la internacionalización (traducciones)
USE_I18N = True

# Habilita la localización (formato de fechas, números según el idioma)
USE_L10N = True

# Habilita el manejo de zonas horarias en la base de datos
USE_TZ = True

# Idiomas disponibles para traducción
LANGUAGES = [
    ('es', 'Español'),
    ('en', 'English'),
]

# Directorio donde se encuentran los archivos de traducción
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# URL base para servir archivos estáticos (CSS, JS, imágenes)
# Ejemplo: /static/css/style.css
STATIC_URL = '/static/'

# Directorio donde Django recolectará todos los archivos estáticos para producción
# Se usa con: python manage.py collectstatic
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Directorios adicionales donde Django buscará archivos estáticos
# BASE_DIR / 'static' = carpeta 'static' en la raíz del proyecto
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files (archivos subidos por usuarios)
# https://docs.djangoproject.com/en/5.2/topics/files/

# URL base para servir archivos de media
# Ejemplo: /media/profile_photos/user1.jpg
MEDIA_URL = '/media/'

# Directorio donde se almacenarán los archivos subidos por usuarios
# BASE_DIR / 'media' = carpeta 'media' en la raíz del proyecto
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuración del modelo de usuario personalizado
# https://docs.djangoproject.com/en/5.2/topics/auth/customizing/#substituting-a-custom-user-model

# Indica a Django que use nuestro modelo Usuario personalizado
# en lugar del modelo User por defecto
AUTH_USER_MODEL = 'usuarios.Usuario'


from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import ignore_logger
from sentry_sdk.integrations.logging import LoggingIntegration
import logging

sentry_logging = LoggingIntegration(
    level=logging.INFO,  # Log level
    event_level=logging.ERROR,  # Error level
)

# Configuración de Sentry para el seguimiento de errores
sentry_sdk.init(
    dsn='https://e9457fd8119b9f0bd50623ac61f36775@o4509805216268288.ingest.us.sentry.io/4509805239009280',
    integrations=[DjangoIntegration(),
    sentry_logging],
    # Add data like request headers and IP for users,
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
)


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },

    'root': {
        'level': 'INFO',
        'handlers': ['console'],
    },
}